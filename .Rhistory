es
set.seed(20)
n <- 100
rows <- 100
sim <- rnorm(n*rows, 0, 1)
m <- matrix(sim, rows)
es <- numeric(rows)
for (i in rows) {
m_positive <- m[i, ][m[i, ]>0]
es[i] <- mean(m_positive)
es[i]
}
es
# m_pos_only <-
# p_sim <- sim[sim > 0 ]
# mean(p_sim)
# median(p_sim)
set.seed(20)
n <- 100
rows <- 100
sim <- rnorm(n*rows, 0, 1)
m <- matrix(sim, rows)
es <- numeric(rows)
for (i in rows) {
m_positive <- m[i, ][m[i, ]>0]
es[i] <- mean(m_positive)
}
es
# m_pos_only <-
# p_sim <- sim[sim > 0 ]
# mean(p_sim)
# median(p_sim)
es[1]
set.seed(20)
n <- 100
rows <- 100
sim <- rnorm(n*rows, 0, 1)
m <- matrix(sim, rows)
es <- numeric(rows)
for (i in rows) {
m_positive <- m[i, ][m[i, ]>0]
es[i] <- mean(m_positive)
print(es[i])
}
es
# m_pos_only <-
# p_sim <- sim[sim > 0 ]
# mean(p_sim)
# median(p_sim)
runif(100)
?stdev
?sd
sd(runif(100))
var(runif(100))
var(runif(100))
var(runif(100))
a <- runif(100)
b <- runif(100)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+3*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+3*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 0, 1)
var(3*a+3*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
?runif
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
install.packages("xml2")
# install.packages("xml2")
library(xml2)
?read_xml
?colnames
lst <- list(c("Mon", "Tues"), c("Wed", "Thurs"), "Fri")
lst
names(lst) <- c("x1", "x2", "x3")
lst
x <- matrix(1:6, nrow = 2)
x
lst <- list(
x = c(2.5, 1.2),
y = c(FALSE, TRUE),
z = c("s", "t")
)
lst
lst[[1]]
Sys.getenv("R_LIBS")
R.home()
Sys.getenv("HOME")
,libPaths()
.libPaths()
?.libPaths
R.home()
Sys.getenv("HOME")
getwd()
R.home()
Sys.getenv("HOME")
getwd()
site_path = R.home(component = "home")
fname = file.path(site_path, "etc", "Rprofile.site")
file.exists(fname)
site_path
Sys.getenv("HOME")
Sys.getenv("HOME")
devtools::install_github("csgillespie/efficient", build_vignettes = TRUE)
devtools::install_github("csgillespie/efficient", build_vignettes = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github("csgillespie/efficient", build_vignettes = TRUE)
devtools::install_github("csgillespie/efficient")
debug(devtools::install_github("csgillespie/efficient"))
install.packages("Rcpp")
loadedNamespaces()
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
.libPaths()
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("Rcpp")
library(httr)
install.packages("Rcpp")
install.packages("Rcpp")
update.packages()
y
install.packages("Rcpp")
devtools::install_github("csgillespie/efficient", build_vignettes = TRUE)
# debug(devtools::install_github("csgillespie/efficient"))
devtools::install_github("csgillespie/efficientR")
devtools::install_github("csgillespie/efficientR")
install.packages("microbenchmark")
install.packages("profvis")
library("microbenchmark")
library("profvis")
library("ggplot2")
setwd("D:/GitHub/dc/writing-functions")
setwd("D:/GitHub/dc/write-func")
y <- 10
f <- function(x) {
x + y
}
f(10)
# returns 20; because y is not passed as an argument to the function, R looks outside of the function environment
y <- 10
f <- function(x) {
y <- 5
x + y
}
f(10)
#returns 15; the value of y is defined inside of the function
f <- function(x) {
y <- 5
x + y
}
f(5)
# what is value of y?
# Answer: object 'y' not found; i.e., does not exist in the global environment
?ifelse
?class
?range
range(1:10)
# Define example vector x
x <- 1:10
# Use the function template to create the rescale01 function
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2]- rng[1])
}
rescale01(x)
# Define example vector x
x <- 1:10
# Use the function template to create the rescale01 function
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2]- rng[1])
}
rescale01(x)
rescale(1:20)
rescale01(1:20)
1 - range(1:20, na.rm = TRUE)
1:30 - range(1:20, na.rm = TRUE)
range(1:20)
# Define example vectors x and y
x <- c( 1, 2, NA, 3, NA)
y <- c(NA, 3, NA, 3,  4)
# Turn this snippet into a function: both_na()
both_na <- function(x, y) {
sum(is.na(x) & is.na(y))
}
both_na(x,y)
?runif
runif(1, 0.985, 1.01)
runif(1, 0.985, 1.01)
runif(1, 0.985, 1.01)
runif(100, 0.985, 1.01)
debt <- 5000    # initial debt
i <- 0          # x axis counter
x_axis <- i     # x axis
y_axis <- debt  # y axis
# Initial plot
plot(x_axis, y_axis, xlim = c(0,10), ylim = c(0,5000))
# Graph your debt
while (debt > 0) {
# Updating variables
debt <- debt - 500
i <- i + 1
x_axis <- c(x_axis, i)
y_axis <- c(y_axis, debt)
# Next plot
plot(x_axis, y_axis, xlim = c(0,10), ylim = c(0,5000))
}
my.temp <- 1:10
my.temp
my.temp <- 1:10
for (i in my.temp) {
print(i)
}
x <- runif(10)
seq(x)
library(opendata)
bdims
data(bdims)
bdims
data(bdims)
data(openintro)
data(openintro)
library(openintro)
bdims
data(bdims)
glimpse(bdims)
View(bdims)
lm(wgt ~ hgt, data = bdims)
mammals
glimpse(mammals)
glimpse(mammals)
library(dplyr)
glimpse(mammals)
# Linear model for weight as a function of height
lm(wgt ~ hgt, data = bdims)
# Linear model for SLG as a function of OBP
lm(SLG ~ OBP, data = mlbBat10)
# Log-linear model for body weight as a function of brain weight
lm(log(BodyWt) ~ log(BrainWt), data = mammals)
install.packages("broom")
mod <- lm(wgt ~ hgt, data = bdims)
mod <- lm(wgt ~ hgt, data = bdims)
# Show the coefficients
coef(mod)
# Show the full output
summary(mod)
# Mean of weights equal to mean of fitted values?
mean(bdims$wgt) == mean(fitted.values)
# Mean of the residuals
mean(residuals)
# Mean of weights equal to mean of fitted values?
mean(bdims$wgt) == mean(fitted.values(mod))
# Mean of the residuals
mean(residuals(mod))
# Load broom
library(broom)
installed.packages("broom")
installed.packages("broom")
install.packages("broom")
library(broom)
# Load broom
library(broom)
# Create bdims_tidy
bdims_tidy <- augment(mod)
# Glimpse the resulting data frame
glimpse(bdims_tidy)
augment(mod) %>%
arrange(desc(.resid)) %>%
head()
data(ben)
ben <- data.frame(74.8, 182.8)
colnames(ben) <- c("wgt", "hgt")
View(ben)
ben
predict(mod, ben)
ben <- data.frame(74.8, 182.8)
colnames(ben) <- c("wgt", "hgt")
# Print ben
ben
# Predict the weight of ben
predict(mod, ben)
# Add the line to the scatterplot
ggplot(data = bdims, aes(x = hgt, y = wgt)) +
geom_point() +
geom_abline(data = coefs,
aes(intercept = `(Intercept)`, slope = hgt),
color = "dodgerblue")
ben <- data.frame(74.8, 182.8)
colnames(ben) <- c("wgt", "hgt")
# Print ben
ben
# Predict the weight of ben
predict(mod, ben)
library(ggplot2)
# Add the line to the scatterplot
ggplot(data = bdims, aes(x = hgt, y = wgt)) +
geom_point() +
geom_abline(data = coefs,
aes(intercept = `(Intercept)`, slope = hgt),
color = "dodgerblue")
summary(mod)
summary(mod)
mean(residuals(mod))
# View summary of model
summary(mod)
# Compute the mean of the residuals
mean(residuals(mod))
# Compute RMSE
sqrt(sum(residuals(mod)^2) / df.residual(mod))
bdims_tidy
glimpse(bdims_tidy)
?var
# Compute SSE for null model
mod_null %>%
summarize(SSE = var(.resid))
# Rank points of high leverage
mod %>%
augment() %>%
arrange(desc(.hat)) %>%
head()
mlBat10
mlbBat10
data(mlbBat10)
mlbBat10
# Create nontrivial_players
nontrivial_players <- mlbBat10 %>%
filter(AB >= 10 & OBP < 0.50)
# Fit model to new data
mod_cleaner <- lm(SLG ~ OBP, data = nontrivial_players)
# View model summary
summary(mod_cleaner)
# Visualize new model
ggplot(data = nontrivial_players, aes(x = OBP, y = SLG)) +
geom_point() +
geom_smooth(method = "lm")
install.packages("blogdown")
blogdown::install_hugo()
blogdown::install_hugo(force = TRUE)
library(blogdown)
library(blogdown)
install.packages("radix")
library(radix)
library(radix)
install.packages("rmarkdown")
library(radix)
library(blogdown)
library(rmarkdown)
library(rmarkdown)
install.packages("radix")
library(radix)
library(radix)
library(radix)
library(rmarkdown)
devtools::install_github("rstudio/radix")
library(radix)
install.packages("xml2")
install.packages("digest")
install.packages("digest")
devtools::install_github("rstudio/radix")
install.packages("stringi")
library(blogdown)
blogdown::install_hugo()
blogdown::update_hugo()
setwd("D:/GitHub/bd")
blogdown::new_site()
blogdown:::new_post_addin()
### comments
rnorm(20)
blogdown:::serve_site()
blogdown:::serve_site()
